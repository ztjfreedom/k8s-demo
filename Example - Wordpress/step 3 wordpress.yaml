apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: wordpress-deploy
  namespace: blog
  labels:
    app: wordpress
spec:
  replicas: 1
  strategy:
    type: RollingUpdate  # 设置滚动更新策略
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      initialContainers:  # 部署容器前检查mysql服务是否可用
      - name: init-db
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', 'until nslookup mysql; do echo waiting for mysql service; sleep 2; done;']
      containers:
      - name: wordpress
        image: wordpress
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: wdport
        livenessProbe:  # 存活性探针，如果检测到应用已经死亡，则会重启应用
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 5
        readinessProbe:  # 可读性探针，如果应用不可读，会把应用从Service的endpoint中移除，可以保证Service下运行的都是正常的服务
          tcpSocket:
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:  # 设置应用的资源限制，与HPA配合使用
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: WORDPRESS_DB_HOST
          value: "mysql: 3306"  # mysql不在同一个Pod中，这里配置mysql的Service的ClusterIP，使用该Service的名字就可以
        - name: WORDPRESS_DB_USER
          value: wordpress
        - name: WORDPRESS_DB_PASSWORD
          value: wordpress

---
#创建一个可以让外网访问的Service，即NodePort
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  namespace: blog
spec:
  selector:  # 选择的是Pod的label
    app: wordpress
  type: NodePort  # 可以让外网访问的Service类型
  ports:
  - name: wordpressport
    protocol: TCP
    port: 80
    targetPort: wdport  # 对应容器当中的端口
    nodePort: 30146  # 指定之后重新生成也不会改变